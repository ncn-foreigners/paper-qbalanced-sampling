pop_data_sample2 <- copy(pop_data[sample2])
pop_data_sample2[, g:=1]
sample_qcal <- pop_data_sample2[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g/pik_1000),
median = weightedMedian(x = x, weights = g/pik_1000),
quantile = weightedQuantile(x, weights = g/pik_1000, probs = probs_est),
sum = sum(x*g/pik_1000))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="qcal-no"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
## with calibration
gcal <- joint_calib(formula_totals =  ~ x1 + x2,
formula_quantiles = ~ x1 + x2,
data = pop_data_sample2,
dweights = 1/pop_data_sample2$pik_1000,
N = N,
pop_totals = colSums(X),
pop_quantiles = pop_quantiles,
method = "raking")
pop_data_sample2[, g1:=gcal$g]
sample_qcal2 <- pop_data_sample2[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g1/pik_1000),
median = weightedMedian(x = x, weights = g1/pik_1000),
quantile = weightedQuantile(x, weights = g1/pik_1000, probs = probs_est),
sum = sum(x*g1/pik_1000))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="qcal-yes"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
df <- rbind(sample_cal, sample_cal2, sample_qcal, sample_qcal2)
df$k <- k
df
}
stopCluster(cl)
# reporting ---------------------------------------------------------------
results500[trues, on = c("variable", "type"), trues := true]
results500 <- results500[!(type %in% c("quantile", "median") & variable %in% c("y21", "y22"))]
results500[, size := 500]
results1000[trues, on = c("variable", "type"), trues := true]
results1000 <- results1000[!(type %in% c("quantile", "median") & variable %in% c("y21", "y22"))]
results1000[, size := 1000]
results <- rbind(results500, results1000)
results[type != "total", .(m = (mean(value) - mean(trues))*100,
var = (var(value))*100,
rmse = (sqrt( (mean(value) - mean(trues))^2 + var(value)))*100),
keyby=.(size, type, variable, sample)] |>
melt(id.vars = c("size", "type", "sample", "variable")) |>
transform(variable=paste(variable, variable.1, sep = "_"),
variable.1 = NULL) |>
transform(variable = factor(variable,
levels = c("y11_m", "y11_var", "y11_rmse",
"y12_m", "y12_var", "y12_rmse",
"y21_m", "y21_var", "y21_rmse",
"y22_m", "y22_var", "y22_rmse"))) |>
dcast(size + type + sample ~ variable, value.var = "value") |>
{\(x) x[ , size := NULL]}() |>
xtable() |>
print.xtable(include.rownames = F)
results[type == "total",
.(m = mean(value) - mean(trues),
var = var(value)/1000,
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(size, variable, sample)][, size := NULL] |>
xtable() |>
print.xtable(include.rownames = F, format.args = list(big.mark = ","))
results[type != "total", .(m = (mean(value) - mean(trues))*100,
var = (var(value))*100,
rmse = (sqrt( (mean(value) - mean(trues))^2 + var(value)))*100),
keyby=.(size, type, variable, sample)] |>
melt(id.vars = c("size", "type", "sample", "variable")) |>
transform(variable=paste(variable, variable.1, sep = "_"),
variable.1 = NULL) |>
transform(variable = factor(variable,
levels = c("y11_m", "y11_var", "y11_rmse",
"y12_m", "y12_var", "y12_rmse",
"y21_m", "y21_var", "y21_rmse",
"y22_m", "y22_var", "y22_rmse"))) |>
dcast(size + type + sample ~ variable, value.var = "value")
results[type != "total", .(m = (mean(value) - mean(trues))*100,
var = (var(value))*100,
rmse = (sqrt( (mean(value) - mean(trues))^2 + var(value)))*100),
keyby=.(size, type, variable, sample)] |>
melt(id.vars = c("size", "type", "sample", "variable")) |>
transform(variable=paste(variable, variable.1, sep = "_"),
variable.1 = NULL) |>
transform(variable = factor(variable,
levels = c("y11_m", "y11_var", "y11_rmse",
"y12_m", "y12_var", "y12_rmse",
"y21_m", "y21_var", "y21_rmse",
"y22_m", "y22_var", "y22_rmse"))) |>
dcast(size + type + sample ~ variable, value.var = "value") |> View()
cores <- 8
R <- 500
N <- 100000
x1 <- rexp(N,1)
x2 <- rexp(N,1)
alp <- rnorm(N)
epsilon <- rnorm(N)
seed_number <- 2024-7-22
set.seed(seed_number)
cores <- 8
R <- 500
N <- 100000
x1 <- rexp(N,1)
x2 <- rexp(N,1)
alp <- rnorm(N)
epsilon <- rnorm(N)
y11 <- 1 + x1 + x2 + alp + epsilon
y12 <- 0.5*(x1-1.5)^2 + x2 + alp + epsilon
y21 <- rbinom(N,1,plogis(-1 + x1 + x2 + alp))
y22 <- rbinom(N,1,plogis(0.5*(x1-1.5)^2 + x2 + alp))
pop_data <- data.table(x1,x2,y11,y12,y21,y22)
colMeans(pop_data)
colSums(pop_data)
library("data.table")
library("jointCalib") ## joint_calib_create_matrix
library("sampling") ## data and inclusionprobabilities
library("BalancedSampling") ## BalancedSampling::cube (faster than sampling)
library("laeken") ## weightedMean and weightedQuantile
library("xtable") ## xtable
library("doSNOW") ## parallel
library("progress") ## progress for parallel computing
library("foreach") ## foreach for parallel computing
seed_number <- 2024-7-22
set.seed(seed_number)
cores <- 8
R <- 10000
N <- 100000
x1 <- rexp(N,1)
x2 <- rexp(N,1)
alp <- rnorm(N)
epsilon <- rnorm(N)
y11 <- 1 + x1 + x2 + alp + epsilon
y12 <- 0.5*(x1-1.5)^2 + x2 + alp + epsilon
y21 <- rbinom(N,1,plogis(-1 + x1 + x2 + alp))
y22 <- rbinom(N,1,plogis(0.5*(x1-1.5)^2 + x2 + alp))
pop_data <- data.table(x1,x2,y11,y12,y21,y22)
pop_data[, pik_500:=500/N]
pop_data[, pik_1000:=1000/N]
#p_quantiles1 <- seq(0.25, 0.75, 0.25)
p_quantiles1 <- seq(0.10, 0.90, 0.10)
probs_est <- 0.9
vars_est <- c("y11", "y12", "y21", "y22")
X <- as.matrix(pop_data[, .(x1, x2)])
pop_quantiles <- list(x1=quantile(pop_data$x1, p_quantiles1),
x2=quantile(pop_data$x2, p_quantiles1))
Xs <- joint_calib_create_matrix(X_q = X,
N = N,
pop_quantiles = pop_quantiles)
# population means and medians
trues <- pop_data[, lapply(.SD, function(x) c(mean = mean(x),
median = median(x),
quantile = quantile(x, probs = probs_est),
sum = sum(x))),
.SDcols = vars_est][, type:=c("mean", "median", "quantile", "total")] |>
melt(id.vars = "type", value.name = "true")
# sample size 500 ---------------------------------------------------------
cl <- makeCluster(cores)
registerDoSNOW(cl)
pb <- progress_bar$new(format = "[:bar] :percent [Elapsed: :elapsedfull || Remaining: :eta]",
total = R)
opts <- list(progress = \(n) pb$tick())
results500 <- foreach(
k=1:R, .combine = rbind,
.packages = c("BalancedSampling", "jointCalib", "data.table", "laeken", "sampling"),
.options.snow = opts) %dopar% {
## standard balancing sampling
sample1 <- BalancedSampling::cube(prob = pop_data$pik_500,  x = X)
## without calibration
pop_data_sample1 <- copy(pop_data[sample1])
pop_data_sample1[, g:=1]
sample_cal <- pop_data_sample1[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g/pik_500),
median = weightedMedian(x = x, weights = g/pik_500),
quantile = weightedQuantile(x, weights = g/pik_500, probs = probs_est),
sum = sum(x*g/pik_500))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="cal-no"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
## with calibration
gcal_x <- calib(Xs = model.matrix(~ x1 + x2, pop_data_sample1),
d = 1/pop_data_sample1$pik_500,
total = c(N, colSums(X)),
method = "raking")
pop_data_sample1[, g1:=gcal_x]
sample_cal2 <- pop_data_sample1[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g1/pik_500),
median = weightedMedian(x = x, weights = g1/pik_500),
quantile = weightedQuantile(x, weights = g1/pik_500, probs = probs_est),
sum = sum(x*g1/pik_500))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="cal-yes"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
## quantile balancing
sample2 <- BalancedSampling::cube(prob = pop_data$pik_500, x = cbind(X,Xs))
## without calibration
pop_data_sample2 <- copy(pop_data[sample2])
pop_data_sample2[, g:=1]
sample_qcal <- pop_data_sample2[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g/pik_500),
median = weightedMedian(x = x, weights = g/pik_500),
quantile = weightedQuantile(x, weights = g/pik_500, probs = probs_est),
sum = sum(x*g/pik_500))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="qcal-no"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
## with calibration
gcal <- joint_calib(formula_totals =  ~ x1 + x2,
formula_quantiles = ~ x1 + x2,
data = pop_data_sample2,
dweights = 1/pop_data_sample2$pik_500,
N = N,
pop_totals = colSums(X),
pop_quantiles = pop_quantiles,
method = "raking")
pop_data_sample2[, g1:=gcal$g]
sample_qcal2 <- pop_data_sample2[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g1/pik_500),
median = weightedMedian(x = x, weights = g1/pik_500),
quantile = weightedQuantile(x, weights = g1/pik_500, probs = probs_est),
sum = sum(x*g1/pik_500))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="qcal-yes"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
df <- rbind(sample_cal, sample_cal2, sample_qcal, sample_qcal2)
df$k <- k
df
}
stopCluster(cl)
# sample size 1000 --------------------------------------------------------
cl <- makeCluster(cores)
registerDoSNOW(cl)
pb <- progress_bar$new(format = "[:bar] :percent [Elapsed: :elapsedfull || Remaining: :eta]",
total = R)
opts <- list(progress = \(n) pb$tick())
results1000 <- foreach(
k=1:R, .combine = rbind,
.packages = c("BalancedSampling", "jointCalib", "data.table", "laeken", "sampling"),
.options.snow = opts) %dopar% {
## standard balancing sampling
sample1 <- BalancedSampling::cube(prob = pop_data$pik_1000,  x = X)
## without calibration
pop_data_sample1 <- copy(pop_data[sample1])
pop_data_sample1[, g:=1]
sample_cal <- pop_data_sample1[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g/pik_1000),
median = weightedMedian(x = x, weights = g/pik_1000),
quantile = weightedQuantile(x, weights = g/pik_1000, probs = probs_est),
sum = sum(x*g/pik_1000))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="cal-no"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
## with calibration
gcal_x <- calib(Xs = model.matrix(~ x1 + x2, pop_data_sample1),
d = 1/pop_data_sample1$pik_1000,
total = c(N, colSums(X)),
method = "raking")
pop_data_sample1[, g1:=gcal_x]
sample_cal2 <- pop_data_sample1[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g1/pik_1000),
median = weightedMedian(x = x, weights = g1/pik_1000),
quantile = weightedQuantile(x, weights = g1/pik_1000, probs = probs_est),
sum = sum(x*g1/pik_1000))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="cal-yes"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
## quantile balancing
sample2 <- BalancedSampling::cube(prob = pop_data$pik_1000, x = cbind(X,Xs))
## without calibration
pop_data_sample2 <- copy(pop_data[sample2])
pop_data_sample2[, g:=1]
sample_qcal <- pop_data_sample2[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g/pik_1000),
median = weightedMedian(x = x, weights = g/pik_1000),
quantile = weightedQuantile(x, weights = g/pik_1000, probs = probs_est),
sum = sum(x*g/pik_1000))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="qcal-no"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
## with calibration
gcal <- joint_calib(formula_totals =  ~ x1 + x2,
formula_quantiles = ~ x1 + x2,
data = pop_data_sample2,
dweights = 1/pop_data_sample2$pik_1000,
N = N,
pop_totals = colSums(X),
pop_quantiles = pop_quantiles,
method = "raking")
pop_data_sample2[, g1:=gcal$g]
sample_qcal2 <- pop_data_sample2[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g1/pik_1000),
median = weightedMedian(x = x, weights = g1/pik_1000),
quantile = weightedQuantile(x, weights = g1/pik_1000, probs = probs_est),
sum = sum(x*g1/pik_1000))),
.SDcols = vars_est][
, type:=c("mean", "median", "quantile", "total")][
, sample:="qcal-yes"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
df <- rbind(sample_cal, sample_cal2, sample_qcal, sample_qcal2)
df$k <- k
df
}
stopCluster(cl)
# reporting ---------------------------------------------------------------
results500[trues, on = c("variable", "type"), trues := true]
results500 <- results500[!(type %in% c("quantile", "median") & variable %in% c("y21", "y22"))]
results500[, size := 500]
results1000[trues, on = c("variable", "type"), trues := true]
results1000 <- results1000[!(type %in% c("quantile", "median") & variable %in% c("y21", "y22"))]
results1000[, size := 1000]
results <- rbind(results500, results1000)
results[type != "total", .(m = (mean(value) - mean(trues))*100,
var = (var(value))*100,
rmse = (sqrt( (mean(value) - mean(trues))^2 + var(value)))*100),
keyby=.(size, type, variable, sample)] |>
melt(id.vars = c("size", "type", "sample", "variable")) |>
transform(variable=paste(variable, variable.1, sep = "_"),
variable.1 = NULL) |>
transform(variable = factor(variable,
levels = c("y11_m", "y11_var", "y11_rmse",
"y12_m", "y12_var", "y12_rmse",
"y21_m", "y21_var", "y21_rmse",
"y22_m", "y22_var", "y22_rmse"))) |>
dcast(size + type + sample ~ variable, value.var = "value") |>
{\(x) x[ , size := NULL]}() |>
xtable() |>
print.xtable(include.rownames = F)
results[type == "total",
.(m = mean(value) - mean(trues),
var = var(value)/1000,
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(size, variable, sample)][, size := NULL] |>
xtable() |>
print.xtable(include.rownames = F, format.args = list(big.mark = ","))
saveRDS(results, "results/appendix-simulation.RDS")
results[type == "total",
.(m = mean(value) - mean(trues),
var = var(value)/1000,
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(size, variable, sample)][, size := NULL]
results[type == "total",
.(m = mean(value) - mean(trues),
var = var(value)/1000,
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(size, variable, sample)][, size := NULL]
results[type == "total",
.(m = mean(value) - mean(trues),
var = var(value)/1000,
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(size, variable, sample)][, size := NULL][]
results[type == "total",
.(m = mean(value) - mean(trues),
var = var(value)/1000,
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(size, variable, sample)][, size := NULL][variable == "y12"]
9431.038/8939.331
7769.385/6643.243
88944.48/60363.18
9431.038/8939.331
7769.385/6643.243
results[type == "total",
.(m = mean(value) - mean(trues),
var = var(value)/1000,
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(size, variable, sample)][, size := NULL][variable == "y21"]
results[type == "total",
.(m = mean(value) - mean(trues),
var = var(value)/1000,
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(size, variable, sample)][, size := NULL][variable == "y22"]
1305.363/1294.970
library("data.table")
library("jointCalib") ## joint_calib_create_matrix
library("sampling") ## data and inclusionprobabilities
library("BalancedSampling") ## BalancedSampling::cube (faster than sampling)
library("laeken") ## weightedMean and weightedQuantile
library("xtable") ## xtable
library("ggplot2")
library("scales")
data(MU284, package = "sampling")
setDT(MU284)
## outliers
#MU284 <- MU284[!LABEL %in% c(137,16,114)]
MU284[, pik:= inclusionprobabilities(P75, 50)]
X <- as.matrix(MU284[, .(P75,CS82,SS82,S82,ME84,REV84)])
vars  <- c("P75", "CS82", "SS82", "S82", "ME84", "REV84", "RMT85")
p_quantiles1 <- 0.5
p_quantiles2 <- c(0.25,0.5,0.75)
p_quantiles3 <- seq(0.10, 0.90, 0.10)
probs_est <- 0.9
pop_quantiles1 <- list(quantile(X[,1], p_quantiles1),
quantile(X[,2], p_quantiles1),
quantile(X[,3], p_quantiles1),
quantile(X[,4], p_quantiles1),
quantile(X[,5], p_quantiles1),
quantile(X[,6], p_quantiles1))
pop_quantiles2 <- list(quantile(X[,1], p_quantiles2),
quantile(X[,2], p_quantiles2),
quantile(X[,3], p_quantiles2),
quantile(X[,4], p_quantiles2),
quantile(X[,5], p_quantiles2),
quantile(X[,6], p_quantiles2))
names(pop_quantiles2) <- names(pop_quantiles1) <- vars[1:6]
Xs_median <- joint_calib_create_matrix(X_q = X, N = nrow(X), pop_quantiles = pop_quantiles1)
Xs_quartiles <- joint_calib_create_matrix(X_q = X, N = nrow(X), pop_quantiles = pop_quantiles2)
trues <- MU284[, lapply(.SD, function(x) c(mean = mean(x),
median = median(x),
quantile = quantile(x, probs = probs_est),
sum = sum(x))),
.SDcols = vars][, type:=c("mean", "median", "quantile", "total")] |>
melt(id.vars = "type", value.name = "true")
trues_quants <- MU284[, lapply(.SD, quantile, probs = p_quantiles3), .SDcols = vars][
, ":="(type=p_quantiles3)] |>
melt(id.vars = c("type"), value.name = "true")
R <- 10000
results <- list()
results_quants <- list()
for (r in 1:R) {
set.seed(2024+r)
if (r %% 100 == 0) print(r)
# standard balanced sampling ----------------------------------------------
sample1 <- BalancedSampling::cube(prob = MU284$pik,  x = X)
MU284_sample <- copy(MU284[sample1])
# g <- sampling::calib(Xs = model.matrix(~ P75 + CS82 + SS82 + S82 + ME84 + REV84, MU284_sample),
#                      d = 1/MU284_sample$pik,
#                      total = c(nrow(MU284), colSums(X)), method = "raking")
# MU284_sample[, g:=g]
MU284_sample[, g:=1]
sample_cal <- MU284_sample[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g/pik),
median = weightedMedian(x = x, weights = g/pik),
quantile = weightedQuantile(x, weights = g/pik, probs = probs_est),
sum = sum(x*g/pik),
var_tot = sampling::varest(Y=x, pik = pik))),
.SDcols = vars][
, type:=c("mean", "median", "quantile", "total", "var_tot")][
, sample:="cal"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
sample_cal_quants <- MU284_sample[, lapply(.SD, weightedQuantile, weights = g/pik, probs = p_quantiles3), .SDcols = vars][
, ":="(type=p_quantiles3,sample="cal")] |>
melt(id.vars = c("type", "sample"), value.name = "value")
# quantile balanced sampling with medians ----------------------------------------------
sample2 <- BalancedSampling::cube(prob = MU284$pik, x = cbind(X,Xs_median))
MU284_sample2 <- copy(MU284[sample2])
# g <- sampling::calib(Xs = model.matrix(~ P75 + CS82 + SS82 + S82 + ME84 + REV84, MU284_sample2),
#                      d = 1/MU284_sample2$pik,
#                      total = c(nrow(MU284), colSums(X)), method = "raking")
# MU284_sample2[, g:=g]
MU284_sample2[, g:=1]
sample_qcal <- MU284_sample2[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g/pik),
median = weightedMedian(x = x, weights = g/pik),
quantile = weightedQuantile(x, weights = g/pik, probs = probs_est),
sum = sum(x*g/pik),
var_tot = sampling::varest(Y=x, pik = pik))),
.SDcols = vars][
, type:=c("mean", "median", "quantile", "total", "var_tot")][
, sample:="qcal"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
sample_qcal_quants <- MU284_sample2[, lapply(.SD, weightedQuantile, weights = g/pik, probs = p_quantiles3), .SDcols = vars][
, ":="(type=p_quantiles3,sample="qcal")] |>
melt(id.vars = c("type", "sample"), value.name = "value")
# quantile balanced sampling with deciles ----------------------------------------------
sample3 <- BalancedSampling::cube(prob = MU284$pik, x = cbind(X,Xs_quartiles))
MU284_sample3 <- copy(MU284[sample3])
# g <- sampling::calib(Xs = model.matrix(~ P75 + CS82 + SS82 + S82 + ME84 + REV84, MU284_sample3),
#                      d = 1/MU284_sample3$pik,
#                      total = c(nrow(MU284), colSums(X)), method = "raking")
# MU284_sample3[, g:=g]
MU284_sample3[, g:=1]
sample_qcal2 <- MU284_sample3[, lapply(.SD, function(x) c(mean = weighted.mean(x=x, w = g/pik),
median = weightedMedian(x = x, weights = g/pik),
quantile = weightedQuantile(x, weights = g/pik, probs = probs_est),
sum = sum(x*g/pik),
var_tot = sampling::varest(Y=x, pik = pik))),
.SDcols = vars][
, type:=c("mean", "median", "quantile", "total", "var_tot")][
, sample:="qcal2"] |>
melt(id.vars = c("type", "sample"), value.name = "value")
sample_qcal_quants2 <- MU284_sample3[, lapply(.SD, weightedQuantile, weights = g/pik, probs = p_quantiles3), .SDcols = vars][
, ":="(type=p_quantiles3,sample="qcal2")] |>
melt(id.vars = c("type", "sample"), value.name = "value")
results[[r]] <- rbind(sample_cal, sample_qcal, sample_qcal2)
results_quants[[r]] <- rbind(sample_cal_quants, sample_qcal_quants,sample_qcal_quants2)
}
# main results ------------------------------------------------------------
results_all <- rbindlist(results, idcol = 'rep')
results_all[trues, on = c("variable", "type"), trues := true]
results_all[variable == "RMT85" & type != "var_tot", .(m = mean(value) - mean(trues),
var = var(value),
rmse = sqrt( (mean(value) - mean(trues))^2 + var(value))),
keyby=.(type, sample)] |>
xtable(digits = 2) |>
print.xtable(include.rownames = F,
format.args = list(big.mark = ","))
# quantiles ----------------------------------------------------------------
results_quants_all <- rbindlist(results_quants, idcol = 'rep')
saveRDS(results_quants_all, file = "results/main-paper-simulation.RDS")
# plot --------------------------------------------------------------------
results_quants_all[variable !="RMT85",
.(cv=sd(value)/mean(value)), .(variable, type, sample)] |>
ggplot(data = _, aes(x = type, y = cv,
group = sample,
linetype = sample, shape = sample)) +
geom_line() +
geom_point() +
facet_wrap(~variable) +
scale_x_continuous(breaks = p_quantiles3) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "Quantile", y = "Monte Carlo CV", linetype = 'Method', shape = "Method") +
scale_linetype_manual(values = c("solid", "dashed", "dotted"),
labels = c("Balanced", "QB medians", "QB quartiles")) +
scale_shape_manual(values = c(1, 2, 3),
labels = c("Balanced", "QB medians", "QB quartiles")) -> p1
ggsave(plot = p1, filename = "figures/figure-sim.pdf", width = 10, height = 5)
p1
